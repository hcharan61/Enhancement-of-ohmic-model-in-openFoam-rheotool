/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Website:  https://openfoam.org                  |
|   \\  /    A nd           | Version:  9                                     |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    "(left|right|top)"
    {      
        type            navierSlip;
        value           uniform (0 0 0); 
        
        model           nonLinearNavierSlip;
        m               1.;
        knl             5e-7;
        URF             1.;
        isTwoPhaseFlow  false;
        isMovingWall    false;
    }
    
    piston
    {      
        type            navierSlip;
        value           uniform (0 0 0); 
        
        model           nonLinearNavierSlip;
        m               1.;
        knl             5e-7;
        URF             1.;
        isTwoPhaseFlow  false;
        isMovingWall    true;
    }
    
    shaft
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            movingShaft;
        codeInclude
        #{
            #include "fvcGrad.H"
        #};
        
        code            
        #{
          if (updated())
          {
            return;
          }
    
          const scalar& t = this->db().time().timeOutputValue();
          const fvMesh& mesh = this->patch().boundaryMesh().mesh(); 
          vectorField n(this->patch().nf());

          label patchi = this->patch().index();
           
          const volVectorField& U = mesh.lookupObject<volVectorField>("U");
          const volScalarField& eta = mesh.lookupObject<volScalarField>("eta");
          
          volTensorField L(fvc::grad(U));
          
          symmTensorField tauP((symm( L + L.T() ) * eta)().boundaryField()[patchi]); 
           
          // This is the contribution from the Navier slip BC
          vectorField uws(-5e-7 * ( (tauP&n) - n*((tauP&n)&n))); 
    
          scalar f = 32.; //Hz
          scalar alpha = 12e-3; // m
          scalar omega = 2.*M_PI*f; // rad/s

          // The first term is the contribution from the shaft motion,
          // which cannot be included as we do for the piston, because
          // the shaft surface is not moving at its real velocity
          // (pointMotionUx = slip != prescribed cos function).
          operator==( omega*alpha*cos(omega*t)*vector(1,0,0) + uws );
          
          fixedValueFvPatchVectorField::updateCoeffs();
          
   	#};
    }
      
    wedge0
    {
        type            wedge;
    }
    
    wedge1
    {
        type            wedge;
    }
}

// ************************************************************************* //
